#-------------------------------------------------------------
OVERVIEW
#-------------------------------------------------------------

This is a JSR-223 implementation for the Gosu language, and is
a fork of Greg Orlowski's partially functional implementation
on Github. Much has changed in Gosu since he took the first stab
at it, including the fact that Gosu is now fully open-source.
Mr. Orlowski was blocked from providing a complete JSR-223
implementation because some of the Gosu internals were still
proprietary at that time.

Greg had written the following in his original README file:

	"Unfortunately, as of 2011-05, while much of Gosu 
	 is open source (Apache Licensed), the open source 
	 parts depend on closed-source internals, which
	 complicate the process of creating a full JSR 223 
	 implementation. I wasn't aware of how much was 
	 closed source until I had already thrown together 
	 this partially-working implementation. I'm publishing 
	 it mainly to give someone else a jump start if they 
	 want to create a complete JSR 223 implementation."

I am an employee at Guidewire Software, the company that created
Gosu. We had a hack-a-thon at work recently, and I partnered
with Rich Berlin to pick up where Greg Orlowski left off. Together
we completed the implementation and proved that it could be used
in conjunction with Spring Dynamic Language Support to inject
beans written in arbitrary languages into Gosu and vice-versa.

See also: https://github.com/jeffklein/spring-dynlang

#-------------------------------------------------------------
GOSU
#-------------------------------------------------------------

http://gosu-lang.org/

Gosu is a finely designed, practical blend of Java and C#
with some Ruby/Groovy closures + parse-time dynamicism
(final types can be enhanced at parse time).

#-------------------------------------------------------------
BUILDING
#-------------------------------------------------------------

Now buildable by simply running maven.

mvn package

All dependencies are available from the public nexus server at gosu-lang.
http://gosu-lang.org/nexus/content/groups/releases

#-------------------------------------------------------------
SAMPLE JSR 223 CODE
#-------------------------------------------------------------

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class YourGosuBootStrapper {
    public static void main(String[] args) {
        ScriptEngineManager mgr = new ScriptEngineManager();
        ScriptEngine engine = mgr.getEngineByName("gosu");

        try {
            // This will correctly print HELLO WORLD
            // On my machine, the initial evaluation takes about 2 seconds,
            // and subsequent calls to eval (once the Gosu internals are
            // initialized), run in between 14 to 25 milliseconds
            Object ret = engine.eval("print(\"HELLO WORLD\")");
        } catch (ScriptException e) {
            e.printStackTrace();
        }
    }
}
